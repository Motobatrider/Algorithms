See the Assessment Guide for information on how to interpret this report. ASSESSMENT SUMMARY Compilation: PASSED API: PASSED Findbugs: FAILED (3 warnings) Checkstyle: PASSED Correctness: 41/41 tests passed Memory: 1/1 tests passed Timing: 39/41 tests passed Aggregate score: 99.02% [Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%] ASSESSMENT DETAILS The following files were submitted: ---------------------------------- 4.4K Mar 19 08:05 BruteCollinearPoints.java 5.1K Mar 19 08:05 FastCollinearPoints.java 5.0K Mar 19 08:05 Point.java ******************************************************************************** * COMPILING ******************************************************************************** % javac Point.java *----------------------------------------------------------- % javac BruteCollinearPoints.java *----------------------------------------------------------- % javac FastCollinearPoints.java *----------------------------------------------------------- ================================================================ Checking the APIs of your programs. *----------------------------------------------------------- Point: BruteCollinearPoints: FastCollinearPoints: ================================================================ ******************************************************************************** * CHECKING STYLE AND COMMON BUG PATTERNS ******************************************************************************** % findbugs *.class *----------------------------------------------------------- L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise. At BruteCollinearPoints.java:[line 47] L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise. At FastCollinearPoints.java:[line 51] L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise. At FastCollinearPoints.java:[line 86] Warnings generated: 3 ================================================================ % checkstyle *.java *----------------------------------------------------------- ================================================================ ******************************************************************************** * TESTING CORRECTNESS ******************************************************************************** Testing correctness of Point *----------------------------------------------------------- Running 3 total tests. Test 1: p.slopeTo(q) * positive infinite slope, where p and q have coordinates in [0, 500) * positive infinite slope, where p and q have coordinates in [0, 32768) * negative infinite slope, where p and q have coordinates in [0, 500) * negative infinite slope, where p and q have coordinates in [0, 32768) * positive zero slope, where p and q have coordinates in [0, 500) * positive zero slope, where p and q have coordinates in [0, 32768) * symmetric for random points p and q with coordinates in [0, 500) * symmetric for random points p and q with coordinates in [0, 32768) * transitive for random points p, q, and r with coordinates in [0, 500) * transitive for random points p, q, and r with coordinates in [0, 32768) * slopeTo(), where p and q have coordinates in [0, 500) * slopeTo(), where p and q have coordinates in [0, 32768) * slopeTo(), where p and q have coordinates in [0, 10) * throw a java.lang.NullPointerException if argument is null ==> passed Test 2: p.compareTo(q) * reflexive, where p and q have coordinates in [0, 500) * reflexive, where p and q have coordinates in [0, 32768) * antisymmetric, where p and q have coordinates in [0, 500) * antisymmetric, where p and q have coordinates in [0, 32768) * transitive, where p, q, and r have coordinates in [0, 500) * transitive, where p, q, and r have coordinates in [0, 32768) * sign of compareTo(), where p and q have coordinates in [0, 500) * sign of compareTo(), where p and q have coordinates in [0, 32768) * sign of compareTo(), where p and q have coordinates in [0, 10) * throw java.lang.NullPointerException exception if argument is null ==> passed Test 3: p.slopeOrder().compare(q, r) * reflexive, where p and q have coordinates in [0, 500) * reflexive, where p and q have coordinates in [0, 32768) * antisymmetric, where p, q, and r have coordinates in [0, 500) * antisymmetric, where p, q, and r have coordinates in [0, 32768) * transitive, where p, q, r, and s have coordinates in [0, 500) * transitive, where p, q, r, and s have coordinates in [0, 32768) * sign of compare(), where p, q, and r have coordinates in [0, 500) * sign of compare(), where p, q, and r have coordinates in [0, 32768) * sign of compare(), where p, q, and r have coordinates in [0, 10) * throw java.lang.NullPointerException if either argument is null ==> passed Total: 3/3 tests passed! ================================================================ ******************************************************************************** * TESTING CORRECTNESS (substituting reference Point and LineSegment) ******************************************************************************** Testing correctness of BruteCollinearPoints *----------------------------------------------------------- Running 17 total tests. The inputs satisfy the following conditions: - no duplicate points - no 5 (or more) points are collinear - all x- and y-coordinates between 0 and 32,767 Test 1: Points from a file * filename = input8.txt * filename = equidistant.txt * filename = input40.txt * filename = input48.txt ==> passed Test 2a: Points from a file with horizontal line segments * filename = horizontal5.txt * filename = horizontal25.txt ==> passed Test 2b: Random horizontal line segments * 1 random horizontal line segment * 5 random horizontal line segments * 10 random horizontal line segments * 15 random horizontal line segments ==> passed Test 3a: Points from a file with vertical line segments * filename = vertical5.txt * filename = vertical25.txt ==> passed Test 3b: Random vertical line segments * 1 random vertical line segment * 5 random vertical line segments * 10 random vertical line segments * 15 random vertical line segments ==> passed Test 4a: Points from a file with no line segments * filename = random23.txt * filename = random38.txt ==> passed Test 4b: Random points with no line segments * 5 random points * 10 random points * 20 random points * 50 random points ==> passed Test 5: Points from a file with fewer than 4 points * filename = input1.txt * filename = input2.txt * filename = input3.txt ==> passed Test 6: Check for dependence on either compareTo() or compare() returning { -1, +1, 0 } instead of { negative integer, positive integer, zero } * filename = equidistant.txt * filename = input40.txt * filename = input48.txt ==> passed Test 7: Check for fragile dependence on return value of toString() * filename = equidistant.txt * filename = input40.txt * filename = input48.txt ==> passed Test 8: Random line segments, none vertical or horizontal * 1 random line segment * 5 random line segments * 10 random line segments * 15 random line segments ==> passed Test 9: Random line segments * 1 random line segment * 5 random line segments * 10 random line segments * 15 random line segments ==> passed Test 10: Check that data type is immutable by testing whether each method returns the same value, regardless of any intervening operations * input8.txt * equidistant.txt ==> passed Test 11: Check that data type does not mutate the constructor argument * input8.txt * equidistant.txt ==> passed Test 12: numberOfSegments() is consistent with segments() * filename = input8.txt * filename = equidistant.txt * filename = input40.txt * filename = input48.txt * filename = horizontal5.txt * filename = vertical5.txt * filename = random23.txt ==> passed Test 13: Throws exception either if argument to constructor is null or if any entry in array is null * argument is null * Point[] of length 10, number of null entries = 1 * Point[] of length 10, number of null entries = 10 * Point[] of length 4, number of null entries = 1 * Point[] of length 3, number of null entries = 1 * Point[] of length 2, number of null entries = 1 * Point[] of length 1, number of null entries = 1 ==> passed Test 14: Check that the constructor throws an exception if duplicate points * 50 points * 25 points * 5 points * 4 points * 3 points * 2 points ==> passed Total: 17/17 tests passed! ================================================================ Testing correctness of FastCollinearPoints *----------------------------------------------------------- Running 21 total tests. The inputs satisfy the following conditions: - no duplicate points - all x- and y-coordinates between 0 and 32,767 Test 1: Points from a file * filename = input8.txt * filename = equidistant.txt * filename = input40.txt * filename = input48.txt * filename = input299.txt ==> passed Test 2a: Points from a file with horizontal line segments * filename = horizontal5.txt * filename = horizontal25.txt * filename = horizontal50.txt * filename = horizontal75.txt * filename = horizontal100.txt ==> passed Test 2b: Random horizontal line segments * 1 random horizontal line segment * 5 random horizontal line segments * 10 random horizontal line segments * 15 random horizontal line segments ==> passed Test 3a: Points from a file with vertical line segments * filename = vertical5.txt * filename = vertical25.txt * filename = vertical50.txt * filename = vertical75.txt * filename = vertical100.txt ==> passed Test 3b: Random vertical line segments * 1 random vertical line segment * 5 random vertical line segments * 10 random vertical line segments * 15 random vertical line segments ==> passed Test 4a: Points from a file with no line segments * filename = random23.txt * filename = random38.txt * filename = random91.txt * filename = random152.txt ==> passed Test 4b: Random points with no line segments * 5 random points * 10 random points * 20 random points * 50 random points ==> passed Test 5a: Points from a file with 5 or more on some line segments * filename = input9.txt * filename = input10.txt * filename = input20.txt * filename = input50.txt * filename = input80.txt * filename = input300.txt * filename = inarow.txt ==> passed Test 5b: Points from a file with 5 or more on some line segments * filename = kw1260.txt * filename = rs1423.txt ==> passed Test 6: Points from a file with fewer than 4 points * filename = input1.txt * filename = input2.txt * filename = input3.txt ==> passed Test 7: Check for dependence on either compareTo() or compare() returning { -1, +1, 0 } instead of { negative integer, positive integer, zero } * filename = equidistant.txt * filename = input40.txt * filename = input48.txt * filename = input299.txt ==> passed Test 8: Check for fragile dependence on return value of toString() * filename = equidistant.txt * filename = input40.txt * filename = input48.txt ==> passed Test 9: Random line segments, none vertical or horizontal * 1 random line segment * 5 random line segments * 25 random line segments * 50 random line segments * 100 random line segments ==> passed Test 10: Random line segments * 1 random line segment * 5 random line segments * 25 random line segments * 50 random line segments * 100 random line segments ==> passed Test 11: Random distinct points in a given range * 5 random points in a 10-by-10 grid * 10 random points in a 10-by-10 grid * 50 random points in a 10-by-10 grid * 90 random points in a 10-by-10 grid * 200 random points in a 50-by-50 grid ==> passed Test 12: M*N points on an M-by-N grid * 3-by-3 grid * 4-by-4 grid * 5-by-5 grid * 10-by-10 grid * 20-by-20 grid * 5-by-4 grid * 6-by-4 grid * 10-by-4 grid * 15-by-4 grid * 25-by-4 grid ==> passed Test 13: Check that data type is immutable by testing whether each method returns the same value, regardless of any intervening operations * input8.txt * equidistant.txt ==> passed Test 14: Check that data type does not mutate the constructor argument * input8.txt * equidistant.txt ==> passed Test 15: numberOfSegments() is consistent with segments() * filename = input8.txt * filename = equidistant.txt * filename = input40.txt * filename = input48.txt * filename = horizontal5.txt * filename = vertical5.txt * filename = random23.txt ==> passed Test 16: Throws exception either if argument to constructor is null or if any entry in array is null * argument is null * Point[] of length 10, number of null entries = 1 * Point[] of length 10, number of null entries = 10 * Point[] of length 4, number of null entries = 1 * Point[] of length 3, number of null entries = 1 * Point[] of length 2, number of null entries = 1 * Point[] of length 1, number of null entries = 1 ==> passed Test 17: Check that the constructor throws an exception if duplicate points * 50 points * 25 points * 5 points * 4 points * 3 points * 2 points ==> passed Total: 21/21 tests passed! ================================================================ ******************************************************************************** * MEMORY ******************************************************************************** Computing memory of Point *----------------------------------------------------------- Running 1 total tests. The maximum amount of memory per Point object is 32 bytes. Student memory = 24 bytes (passed) Total: 1/1 tests passed! ================================================================ ******************************************************************************** * TIMING ******************************************************************************** Timing BruteCollinearPoints *----------------------------------------------------------- Running 10 total tests. Test 1a-1e: Find collinear points among n random distinct points slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 16 0.01 1120 0 1120 120 => passed 32 0.00 9920 0 9920 496 => passed 64 0.00 83328 0 83328 2016 => passed 128 0.01 682752 0 682752 8128 => passed 256 0.03 5527040 0 5527040 32640 ==> 5/5 tests passed Test 2a-2e: Find collinear points among n/4 arbitrary line segments slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 16 0.00 1220 0 1220 140 => passed 32 0.00 10338 0 10338 536 => passed 64 0.00 85300 0 85300 2092 => passed 128 0.01 690726 0 690726 8282 => passed 256 0.03 5559422 0 5559422 32954 ==> 5/5 tests passed Total: 10/10 tests passed! ================================================================ Timing FastCollinearPoints *----------------------------------------------------------- Running 31 total tests. Test 1a-1g: Find collinear points among n random distinct points slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 64 0.02 2016 7959 17934 2315 => passed 128 0.01 8128 39574 87276 8864 => passed 256 0.01 32640 187350 407340 34354 => passed 512 0.08 130816 871360 1873536 134780 => passed 1024 0.28 523776 3965788 8455352 532738 => passed 2048 0.50 2096128 17827816 37751760 2116060 ==> 6/6 tests passed lg ratio(slopeTo() + 2*compare()) = lg (37751760 / 8455352) = 2.16 => passed ==> 7/7 tests passed Test 2a-2g: Find collinear points among the n points on an n-by-1 grid slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 64 0.00 2137 1953 6043 2321 => passed 128 0.00 8377 8001 24379 8868 => passed 256 0.00 33145 32385 97915 34340 => passed 512 0.01 131833 130305 392443 134776 => passed 1024 0.03 525817 522753 1571323 532716 => passed 2048 0.05 2100217 2094081 6288379 2116075 => passed 4096 0.20 8394745 8382465 25159675 8430504 ==> 7/7 tests passed lg ratio(slopeTo() + 2*compare()) = lg (25159675 / 6288379) = 2.00 => passed ==> 8/8 tests passed Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 64 0.00 4095 6976 18047 2326 => passed 128 0.00 19567 26477 72521 8857 => passed 256 0.01 100943 69828 240599 34369 => passed 512 0.01 580111 245904 1071919 134782 => passed 1024 0.05 3721615 927950 5577515 532739 => passed 2048 0.27 26077327 3607527 33292381 2116056 => passed 4096 1.79 193799823 14220882 222241587 8430593 ==> 7/7 tests passed lg ratio(slopeTo() + 2*compare()) = lg (222241587 / 33292381) = 2.74 => FAILED (lg ratio is much greater than 2, your algorithm is probably cubic (or worse)) ==> 7/8 tests passed Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 64 0.00 4577 7701 19979 2321 => passed 128 0.00 24601 35866 96333 8863 => passed 256 0.00 140521 127120 394761 34366 => passed 512 0.01 884745 385258 1655261 134785 => passed 1024 0.07 6089545 1438626 8966797 532723 => passed 2048 0.44 44709577 5568217 55846011 2116039 => passed 4096 3.02 341534153 21899886 385333925 8430553 ==> 7/7 tests passed lg ratio(slopeTo() + 2*compare()) = lg (385333925 / 55846011) = 2.79 => FAILED (lg ratio is much greater than 2, your algorithm is probably cubic (or worse)) ==> 7/8 tests passed Total: 29/31 tests passed! ================================================================